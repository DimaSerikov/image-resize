<?php

namespace Alexantr\ImageResize;

/**
 * Create image from generated by Image path
 */
class Creator
{
    const BLANK_IMAGE_NAME = 'b.gif';
    const DEFAULT_IMAGE_NAME = 'no-image.png';
    const DEFAULT_SILHOUETTE_NAME = 'no-image-person.png';

    const FIT_CROP = 'crop';
    const FIT_CONTAIN = 'fit';
    const FIT_WIDTH = 'fitw';
    const FIT_HEIGHT = 'fith';
    const FIT_FILL = 'fill'; // old 'place'
    const FIT_MAX = 'max';
    const FIT_STRETCH = 'stretch';
    const PLACE_CENTER = 'center';

    /**
     * @var string base directory where resized images are saving
     */
    public static $resizedBaseDir = '/resized';
    /**
     * @var int min image resolution size
     */
    public static $minSize = 8;
    /**
     * @var int max image resolution size
     */
    public static $maxSize = 3072;
    /**
     * @var int min jpeg quality
     */
    public static $minQuality = 10;
    /**
     * @var int max jpeg quality
     */
    public static $maxQuality = 100;
    /**
     * @var int default jpeg quality
     */
    public static $defaultQuality = 90;
    /**
     * @var string default background color
     */
    public static $defaultBgColor = 'fff';
    /**
     * @var array allowed mime types
     */
    public static $mimeTypes = array('image/gif', 'image/jpeg', 'image/png');
    /**
     * @var array allowed methods
     */
    public static $methods = array(
        self::FIT_CROP,
        self::FIT_CONTAIN,
        self::FIT_WIDTH,
        self::FIT_HEIGHT,
        self::FIT_FILL,
        self::FIT_MAX,
        self::FIT_STRETCH,
        self::PLACE_CENTER,
    );
    /**
     * @var string custom path to default image
     */
    public static $defaultImagePath;
    /**
     * @var string custom path to default silhouette image
     */
    public static $defaultSilhouettePath;
    /**
     * @var bool generate progressive jpegs
     */
    public static $enableProgressiveJpeg = false;
    /**
     * @var bool force imagick disabled
     */
    public static $imagickDisabled = false;
    /**
     * @var int PNG compression level (0..9)
     */
    public static $gdPngCompressionLevel = 9;

    /**
     * Create image based on $path
     * @param string $webroot
     * @param string $path
     * @throws \Exception
     */
    public static function create($webroot, $path)
    {
        // show blank image
        if ($path == self::BLANK_IMAGE_NAME) {
            self::showBlankImage();
        }

        // get params from path
        $params = Helper::parsePath($path);
        if (!is_array($params)) {
            self::showBlankImage();
        }

        $dir_name = $params['dir_name'];
        $width = $params['width'];
        $height = $params['height'];
        $method = $params['method'];
        $quality = $params['quality'];
        $bg_color = $params['bg_color'];
        $silhouette = $params['silhouette'];
        $disable_alpha = $params['disable_alpha'];
        $as_jpeg = $params['as_jpeg'];
        $place_upper = $params['place_upper'];
        $no_top_offset = $params['no_top_offset'];
        $no_bottom_offset = $params['no_bottom_offset'];
        $disable_copy = $params['disable_copy'];
        $skip_small = $params['skip_small'];
        $no_exif_rotate = $params['no_exif_rotate'];
        $grayscale = $params['grayscale'];
        $image_url = $params['image_url'];

        // wrong params
        if (
            empty($image_url) ||
            $width < self::$minSize || $height < self::$minSize ||
            $width > self::$maxSize || $height > self::$maxSize ||
            !in_array($method, self::$methods)
        ) {
            self::showBlankImage();
        }

        // clean url
        $image_url = Helper::cleanImageUrl($image_url);
        if (empty($image_url)) {
            self::showBlankImage();
        }

        // if image already exists
        $dest_path = $webroot . self::$resizedBaseDir . '/' . $dir_name . '/' . $image_url;
        if (is_file($dest_path)) {
            self::showImage($dest_path);
        }

        // original image abs path
        $orig_path = $webroot . '/' . $image_url;

        // try to deal with jpeg forcing
        if (!is_file($orig_path) && $as_jpeg) {
            $orig_dirname = dirname($orig_path);
            $filename = pathinfo($orig_path, PATHINFO_FILENAME);
            $orig_ext = pathinfo($filename, PATHINFO_EXTENSION);
            if (!empty($orig_ext) && in_array($orig_ext, array('jpeg', 'jpg', 'png', 'gif')) && is_file($orig_dirname . '/' . $filename)) {
                $orig_path = $orig_dirname . '/' . $filename;
            }
        }

        // create paths for missing image
        if (!is_file($orig_path)) {
            if ($silhouette) {
                if (self::$defaultSilhouettePath !== null && is_file(self::$defaultSilhouettePath)) {
                    $image_name = basename(self::$defaultSilhouettePath);
                    $orig_path = self::$defaultSilhouettePath;
                    $dest_path = $webroot . self::$resizedBaseDir . '/' . $dir_name . '/custom-' . $image_name;
                } else {
                    $image_name = self::DEFAULT_SILHOUETTE_NAME;
                    $orig_path = __DIR__ . '/images/' . $image_name;
                    $dest_path = $webroot . self::$resizedBaseDir . '/' . $dir_name . '/' . $image_name;
                }
            } else {
                if (self::$defaultImagePath !== null && is_file(self::$defaultImagePath)) {
                    $image_name = basename(self::$defaultImagePath);
                    $orig_path = self::$defaultImagePath;
                    $dest_path = $webroot . self::$resizedBaseDir . '/' . $dir_name . '/custom-' . $image_name;
                } else {
                    $image_name = self::DEFAULT_IMAGE_NAME;
                    $orig_path = __DIR__ . '/images/' . $image_name;
                    $dest_path = $webroot . self::$resizedBaseDir . '/' . $dir_name . '/' . $image_name;
                }
            }
            // already exists - with php each time
            if (is_file($dest_path)) {
                self::showImage($dest_path);
            }
        }

        // can't find default image
        if (!is_file($orig_path)) {
            self::showBlankImage();
        }

        // check sizes
        $size = getimagesize($orig_path);
        if (!$size) {
            self::showBlankImage();
        }
        $src_w = $size[0];
        $src_h = $size[1];
        if ($src_w == 0 || $src_h == 0 || empty($size['mime']) || !in_array($size['mime'], self::$mimeTypes)) {
            self::showBlankImage();
        }

        $mime_type = $size['mime'];
        $is_jpeg = $mime_type == 'image/jpeg';
        $is_png = $mime_type == 'image/png';
        $is_gif = $mime_type == 'image/gif';

        // create dir
        $dir_path = dirname($dest_path);
        if (!is_dir($dir_path)) {
            if (!@mkdir($dir_path, 0775, true)) {
                self::showBlankImage();
            }
        }

        $orientation = 1;

        // try to read exif orientation
        if (!$no_exif_rotate && $is_jpeg && function_exists('exif_read_data')) {
            $exif = @exif_read_data($orig_path);
            if (!empty($exif['Orientation'])) {
                $orientation = $exif['Orientation'];
            }
        }

        // switch width & height
        if (in_array($orientation, array(5, 6, 7, 8))) {
            $old_w = $src_w;
            $src_w = $src_h;
            $src_h = $old_w;
        }

        if (!$disable_copy) {
            // copy with identical sizes
            if (
                ($method == self::FIT_WIDTH && $width == $src_w) ||
                ($method == self::FIT_HEIGHT && $height == $src_h) ||
                ($method != self::FIT_WIDTH && $method != self::FIT_HEIGHT && $width == $src_w && $height == $src_h)
            ) {
                copy($orig_path, $dest_path);
                if (is_file($dest_path)) {
                    self::showImage($dest_path);
                }
            }

            // copy smaller
            if ($skip_small) {
                if (
                    ($method == self::FIT_WIDTH && $width >= $src_w) ||
                    ($method == self::FIT_HEIGHT && $height >= $src_h) ||
                    ($method != self::FIT_WIDTH && $method != self::FIT_HEIGHT && $width >= $src_w && $height >= $src_h)
                ) {
                    copy($orig_path, $dest_path);
                    if (is_file($dest_path)) {
                        self::showImage($dest_path);
                    }
                }
            }
        }

        $dst_x = 0;
        $dst_y = 0;
        $crop_x = 0;
        $crop_y = 0;
        $crop_w = $src_w;
        $crop_h = $src_h;

        if ($method == self::FIT_STRETCH) {
            $new_w = $width;
            $new_h = $height;
        } elseif ($method == self::FIT_MAX) {
            $ratio = max($width / $src_w, $height / $src_h);
            $new_w = round($src_w * $ratio);
            $new_h = round($src_h * $ratio);
            $width = $new_w;
            $height = $new_h;
        } elseif ($method == self::FIT_CROP) {
            $ratio = max($width / $src_w, $height / $src_h);
            $new_w = round($src_w * $ratio);
            $new_h = round($src_h * $ratio);
            $crop_x = floor(($src_w - $width / $ratio) / 2);
            $crop_y = round(($src_h - $height / $ratio) / 2);
            $crop_w = $src_w - $crop_x * 2;
            $crop_h = $src_h - $crop_y * 2;
            if ($no_top_offset) {
                $crop_y = 0;
            } elseif ($no_bottom_offset) {
                $crop_y = floor($src_h - $height / $ratio);
            } else {
                // place upper
                if ($crop_y > 0 && $place_upper) {
                    $crop_y = round($crop_y / 3 * 2);
                }
            }
        } elseif ($method == self::FIT_WIDTH) {
            $new_w = $width;
            $new_h = $new_w / $src_w * $src_h;
            $height = $new_h;
        } elseif ($method == self::FIT_HEIGHT) {
            $new_h = $height;
            $new_w = $new_h * $src_w / $src_h;
            $width = $new_w;
        } elseif ($method == self::FIT_FILL) {
            $ratio = min($width / $src_w, $height / $src_h);
            $new_w = round($src_w * $ratio);
            $new_h = round($src_h * $ratio);
            $dst_x = round(($width - $new_w) / 2);
            if ($no_top_offset) {
                $dst_y = 0;
            } elseif ($no_bottom_offset) {
                $dst_y = $height - $new_h;
            } else {
                $dst_y = round(($height - $new_h) / 2);
                // place upper
                if ($dst_y > 0 && $place_upper) {
                    $dst_y = round($dst_y / 3 * 2);
                }
            }
        } elseif ($method == self::PLACE_CENTER) {
            $new_w = min($width, $src_w);
            $new_h = min($height, $src_h);
            if ($src_w > $width) {
                $crop_x = floor(($src_w - $width) / 2);
            } elseif ($src_w < $width) {
                $dst_x = round(($width - $src_w) / 2);
            }
            if ($src_h > $height) {
                $crop_y = floor(($src_h - $height) / 2);
            } elseif ($src_h < $height) {
                $dst_y = round(($height - $src_h) / 2);
            }
            $crop_w = $src_w - $crop_x * 2;
            $crop_h = $src_h - $crop_y * 2;
        } else {
            $ratio = min($width / $src_w, $height / $src_h);
            $new_w = round($src_w * $ratio);
            $new_h = round($src_h * $ratio);
            $width = $new_w;
            $height = $new_h;
        }

        // imagick
        if (!self::$imagickDisabled && extension_loaded('imagick')) {
            try {
                $im = new \Imagick($orig_path . ($is_gif ? '[0]' : ''));
                $im->stripImage();

                $rgb = Helper::hex2rgb($bg_color);
                $fill_color = new \ImagickPixel();
                if (!$disable_alpha && !$as_jpeg && !$is_jpeg) {
                    $fill_color->setColor("rgba({$rgb['r']}, {$rgb['g']}, {$rgb['b']}, 0)");
                } else {
                    $fill_color->setColor("rgb({$rgb['r']}, {$rgb['g']}, {$rgb['b']})");
                }

                // rotate original
                // https://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/
                if ($orientation == 6 || $orientation == 5) {
                    $im->rotateImage($fill_color, 90);
                }
                if ($orientation == 3 || $orientation == 4) {
                    $im->rotateImage($fill_color, 180);
                }
                if ($orientation == 8 || $orientation == 7) {
                    $im->rotateImage($fill_color, 270);
                }
                if (in_array($orientation, array(2, 4, 5, 7))) {
                    $im->flopImage();
                }

                $new_im = new \Imagick();
                $new_im->newImage($width, $height, $fill_color);

                if ($method == self::FIT_CROP || $method == self::PLACE_CENTER) {
                    $im->cropImage($crop_w, $crop_h, $crop_x, $crop_y);
                    // https://www.php.net/manual/ru/imagick.cropimage.php#97232
                    if ($is_gif) {
                        $im->setImagePage(0, 0, 0, 0);
                    }
                    if ($method == self::FIT_CROP) {
                        $im->resizeImage($width, $height, \Imagick::FILTER_LANCZOS, 1, false);
                    }
                } else {
                    $im->resizeImage($new_w, $new_h, \Imagick::FILTER_LANCZOS, 1, false);
                }

                $new_im->compositeImage($im, \Imagick::COMPOSITE_DEFAULT, $dst_x, $dst_y);

                // filter
                if ($grayscale) {
                    $new_im->modulateImage(100, 0, 100);
                }

                if ($is_png && !$as_jpeg) {
                    $new_im->writeImage('png:' . $dest_path);
                } elseif ($is_gif && !$as_jpeg) {
                    $new_im->writeImage('gif:' . $dest_path);
                } else {
                    $new_im->setImageCompression(\Imagick::COMPRESSION_JPEG);
                    $new_im->setImageCompressionQuality($quality);
                    if (self::$enableProgressiveJpeg) {
                        $new_im->setInterlaceScheme(\Imagick::INTERLACE_PLANE);
                    }
                    $new_im->writeImage('jpeg:' . $dest_path);
                }

                $im->destroy();
                $new_im->destroy();

                if (is_file($dest_path)) {
                    self::showImage($dest_path, $mime_type);
                } else {
                    self::showBlankImage();
                }

            } catch (\Exception $e) {
                self::showBlankImage();
            }
            return;
        }

        // gd
        if ($is_gif) {
            $im = imagecreatefromgif($orig_path);
        } elseif ($is_png) {
            $im = imagecreatefrompng($orig_path);
        } else {
            $im = imagecreatefromjpeg($orig_path);
        }

        if ($im === false) {
            self::showBlankImage();
        }

        // rotate original
        // https://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/
        if ($orientation == 6 || $orientation == 5) {
            $im = imagerotate($im, 270, 0);
        }
        if ($orientation == 3 || $orientation == 4) {
            $im = imagerotate($im, 180, 0);
        }
        if ($orientation == 8 || $orientation == 7) {
            $im = imagerotate($im, 90, 0);
        }
        if (in_array($orientation, array(2, 4, 5, 7))) {
            Helper::flopImage($im);
        }

        // copying
        $rgb = Helper::hex2rgb($bg_color);
        $new_im = imagecreatetruecolor($width, $height);
        if (!$disable_alpha && !$as_jpeg && $is_png) {
            imagealphablending($new_im, false);
            imagesavealpha($new_im, true);
            $color = imagecolorallocatealpha($new_im, $rgb['r'], $rgb['g'], $rgb['b'], 127);
            imagefilledrectangle($new_im, 0, 0, $width, $height, $color);
        } else {
            $color = imagecolorallocate($new_im, $rgb['r'], $rgb['g'], $rgb['b']);
            imagefill($new_im, 0, 0, $color);
        }
        if ($method == self::FIT_CROP || $method == self::PLACE_CENTER) {
            $im = Helper::cropImage($im, array(
                'x' => $crop_x,
                'y' => $crop_y,
                'width' => $crop_w,
                'height' => $crop_h,
            ));
            $crop_x = 0;
            $crop_y = 0;
        }
        if ($method == self::FIT_CROP) {
            $new_w = $width;
            $new_h = $height;
        }
        if ($method == self::PLACE_CENTER) {
            $crop_w = $new_w;
            $crop_h = $new_h;
        }
        imagecopyresampled($new_im, $im, $dst_x, $dst_y, $crop_x, $crop_y, $new_w, $new_h, $crop_w, $crop_h);

        // filter
        if ($grayscale) {
            imagefilter($new_im, IMG_FILTER_GRAYSCALE);
        }

        // saving
        if ($is_png && !$as_jpeg) {
            $level = min(9, max(0, self::$gdPngCompressionLevel));
            imagepng($new_im, $dest_path, $level);
        } elseif ($is_gif && !$as_jpeg) {
            imagegif($new_im, $dest_path);
        } else {
            if (self::$enableProgressiveJpeg) {
                imageinterlace($new_im, 1);
            }
            imagejpeg($new_im, $dest_path, $quality);
        }

        imagedestroy($im);
        imagedestroy($new_im);

        if (is_file($dest_path)) {
            self::showImage($dest_path, $mime_type);
        } else {
            self::showBlankImage();
        }
    }

    /**
     * Show Image
     * @param string $image_path
     * @param null|string $mime_type
     */
    public static function showImage($image_path, $mime_type = null)
    {
        if ($mime_type === null) {
            $size = getimagesize($image_path);
            if (!$size || $size[0] == 0 || $size[1] == 0 || empty($size['mime']) || !in_array($size['mime'], self::$mimeTypes)) {
                self::showBlankImage();
            }
            $mime_type = $size['mime'];
        }
        if (!in_array($mime_type, self::$mimeTypes)) {
            self::showBlankImage();
        }
        header('Content-Type: ' . $mime_type);
        header('Content-Length: ' . filesize($image_path));
        readfile($image_path);
        exit;
    }

    /**
     * Show Blank Image (1x1 transparent)
     */
    public static function showBlankImage()
    {
        $image = base64_decode('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==');
        header('Content-Type: image/gif');
        header('Content-Length: ' . mb_strlen($image, '8bit'));
        echo $image;
        exit;
    }
}
